This file is licensed under the terms of the expat license, see the file EXPAT.

+++ Installing Midori +++

Building and installing Midori is straightforward.

Make sure you have Python 2.4 or higher installed.

Change to the Midori folder on your hard disk in a terminal.

Run './waf configure'

Run './waf build'

You can now run Midori from the build folder like so

'./waf build --run'

Using --run as shown above will make sure extensions as well as
localizations are used from the build folder.

You can install it with './waf install'

If you need to do a clean rebuild, you can do either './waf clean'
in order to remove binaries or './waf distclean' which deletes generated
configuration files as well.

For further options run './waf --help'

+++ Debugging Midori +++

Run './waf configure -d full' from the Midori folder.

Run './waf build'

Midori is now built with debugging symbols.

Make sure you have installed 'gdb', the GNU Debugger.

Run Midori as 'gdb _build/default/midori/midori'.

Inside gdb, type 'run'.

Try to reproduce a crash that you experienced earlier,
this time Midori will freeze at the point of the crash.
Switch to your terminal, type bt ('backtrace') and hit Return.
What you obtained now is a backtrace that should include
function names and line numbers.

If the problem is a warning and not a crash, try this:

'G_DEBUG=all gdb _build/default/midori/midori'

If you are interested in HTTP communication, try this:

'MIDORI_DEBUG=headers _build/default/midori/midori'

Where 'headers' can be replaced with 'body' to get full message contents.

If you are interested in (non-) touchscreen behaviour, try this:

'MIDORI_TOUCHSCREEN=1 _build/default/midori/midori', or

'MIDORI_TOUCHSCREEN=0 _build/default/midori/midori'

If you want to "dry run" without WebKitGTK+ rendering, try this:

'MIDORI_DEBUG=unarmed _build/default/midori/midori'

If you want to test bookmarks, you can enable database tracing:

'MIDORI_DEBUG=bookmarks _build/default/midori/midori'

To disable Netscape plugins, use MOZ_PLUGIN_PATH=/.

When running from the build folder, extensions will also be located
in the build folder (setting MIDORI_EXTENSION_PATH is no longer needed).

For further information a tutorial for gdb and
reading up on how you can install debugging
symbols for libraries used by Midori are recommended.
